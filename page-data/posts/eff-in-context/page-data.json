{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/eff-in-context","result":{"data":{"markdownRemark":{"id":"211d07d9-e517-52cb-bcaa-0de323963d13","html":"<p>Contents:</p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#many-ways-to-say-hello\">Many ways to say hello</a></p>\n<ul>\n<li><a href=\"#the-simplest-way\">The simplest way</a></li>\n<li><a href=\"#the-testable-way\">The testable way</a></li>\n<li><a href=\"#the-reader-way\">The Reader way</a></li>\n<li><a href=\"#the-reader-writer-way\">The Reader-writer way</a></li>\n<li><a href=\"#the-reader-writer-either-way\">The Reader-writer-either way</a></li>\n<li><a href=\"#the-monad-transformer-way\">The monad transformer way</a></li>\n<li><a href=\"#the-eff-monad-way\">The Eff monad way</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>Learning how to use <a href=\"https://github.com/atnos-org/eff\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eff in Scala</a>, let alone learning how it works on the inside, is quite the challenge for me and I believe for many people too. I feel that there’s quite the chasm from running a few easy examples to putting together a full app using Eff.</p>\n<p>However, Eff has a great amount of documentation for the initiated FP user in Scala. In fact, there’s even a set of exercises in <a href=\"https://github.com/benhutchison/GettingWorkDoneWithExtensibleEffects/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>“Getting Work Done With Extensible Effects”</em></a> that guide you in a methodical way towards understanding how you might use Eff in a real, non-trivial app. There’s even <a href=\"https://vimeo.com/channels/flatmap2016/165927840\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a great presentation</a> about a practical way to use Eff in bigger projects, though I’ve yet to see the usage of the overall framework described in it in a sample application. I hope there’s one out there and I hope I just missed it. Or maybe it’s not needed at all.</p>\n<p>That said, I think there’s still a part of that chasm that needs to be covered. It’s somewhere in between someone starting out with FP in Scala and the aforementioned exercises by Ben Hutchinson. I think there’s some value in going back to the simplest problems and seeing what Eff looks like there.</p>\n<p>I’m planning to have this series span the first set of adriannn’s <a href=\"https://adriann.github.io/programming_problems.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Programming Problems</a>, namely the <em>Elementary Problems</em>. <a href=\"https://github.com/zach-albia/learning-eff\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This series’ code</a> is available on Github. We kick things off with our first problem:</p>\n<blockquote>\n<p>Write a program that prints ‘Hello World’ to the screen.</p>\n</blockquote>\n<h1 id=\"many-ways-to-say-hello\" style=\"position:relative;\"><a href=\"#many-ways-to-say-hello\" aria-label=\"many ways to say hello permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Many ways to say Hello</h1>\n<h2 id=\"the-simplest-way\" style=\"position:relative;\"><a href=\"#the-simplest-way\" aria-label=\"the simplest way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The simplest way</h2>\n<p>Our first jab at the problem begins with the simplest possible example that we’re taught when we first learn to program in any language. Our first problem happens to be Scala’s Hello World:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Prob01Pass01 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It’s simple, but inflexible. You can only ever print to the console here. Period. What if we wanted to print <code class=\"language-text\">&quot;Hello World&quot;</code> to a file? Also, how do we know it works? We run it, and it prints <code class=\"language-text\">Hello World</code> to the console. But we did have to look at the characters it prints out. And we did have to make sure <em>every single character</em> lines up to make the string <code class=\"language-text\">&quot;Hello World&quot;</code>. We aren’t exactly perfect at reading either, and our eyes can trip and think we’re reading the right string when we’re not!</p>\n<p>If it can happen to us in a simple “Hello World”, imagine what would happen if we had to do it for any bigger program. We say we <strong>cannot test</strong> <code class=\"language-text\">main</code>. It’s opaque to any testing effort unless we go to great lengths just to read the output on the console itself. Let’s see if we can test one of the simplest programs ever.</p>\n<h2 id=\"the-testable-way\" style=\"position:relative;\"><a href=\"#the-testable-way\" aria-label=\"the testable way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <em>testable</em> way</h2>\n<p>At the heart of software development is getting things done <em>automatically</em>. That includes testing. We have to restructure our tiny Hello World app so we can run a test:</p>\n<ol>\n<li>to see if our program compiles,</li>\n<li>to see if it works as expected without having to look at our program’s console output, and</li>\n<li>to be able to automatically do both 1 &#x26; 2 repeatedly.</li>\n</ol>\n<p>Here is one way to refactor our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Prob01Pass02 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> defaultPrintln<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> Predef<span class=\"token punctuation\">.</span>println\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span>\n    printHelloWorld<span class=\"token punctuation\">(</span>defaultPrintln<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> printHelloWorld<span class=\"token punctuation\">(</span>println<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">println</code> is now totally <em>divorced</em> from the concept of the console. We might as well write <code class=\"language-text\">&quot;Hello World&quot;</code> in crop circles, given the right <code class=\"language-text\">println</code>. More practically, now we can write code to test <code class=\"language-text\">printHelloWorld</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> Prob01Pass01<span class=\"token punctuation\">.</span>printHelloWorld\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>scalatest</span><span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">class</span> Prob01Spec <span class=\"token keyword\">extends</span> FlatSpec <span class=\"token keyword\">with</span> Matchers <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">val</span> mockPrintln<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> _ should be <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token string\">\"our second pass at printHelloWorld\"</span> should\n      <span class=\"token string\">\"print hello world to a println function\"</span> in <span class=\"token punctuation\">{</span>\n    Prob01Pass02<span class=\"token punctuation\">.</span>printHelloWorld<span class=\"token punctuation\">(</span>_ should be <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our test code <em>intercepts</em> what’s passed to our function. This allows us to automatically confirm that, for whatever way we can print <code class=\"language-text\">&quot;Hello World&quot;</code>, <code class=\"language-text\">println</code> will receive <em>exactly</em> the string <code class=\"language-text\">&quot;Hello World&quot;</code> and <em>nothing else</em>.</p>\n<h2 id=\"the-reader-way\" style=\"position:relative;\"><a href=\"#the-reader-way\" aria-label=\"the reader way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Reader way</h2>\n<p><code class=\"language-text\">printHelloWorld</code> is a function that takes a <code class=\"language-text\">println</code> function and runs it on <code class=\"language-text\">&quot;Hello World&quot;</code>, giving back <code class=\"language-text\">Unit</code>. Reader is just an effect in the form of a function taking one parameter which yields our value, the return value. Let’s look at our testable code in terms of Reader:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">.</span>Reader\n\n<span class=\"token keyword\">object</span> Prob01Pass03 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> defaultPrintln<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> Predef<span class=\"token punctuation\">.</span>println\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld\n\n    <span class=\"token comment\">// at the end of the world</span>\n    program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>defaultPrintln<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">val</span> printHelloWorld<span class=\"token operator\">:</span> Reader<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    Reader <span class=\"token punctuation\">{</span> println <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our code is very similar to our second pass. Note that we only had to change a little bit of code Since <code class=\"language-text\">Reader</code> and a function with one parameter, namely <code class=\"language-text\">Function1[A, B]</code> or <code class=\"language-text\">A =&gt; B</code> in Scala, are practically one and the same. In our usage of <code class=\"language-text\">Reader</code> here, we mean it to <em>delay reading or asking for</em>  a <code class=\"language-text\">println</code>  function in order to <em>return</em> <code class=\"language-text\">Unit</code>, i.e. to make some side effect(s). I think “Reader” is a weird name for it. It’d probably make more sense as the “Context”, “Config” or “Dependency”. But what do I know?</p>\n<p><code class=\"language-text\">Reader</code> also allows us to write tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"our third pass at printHelloWorld\"</span> should\n    <span class=\"token string\">\"be a flexible hello world program\"</span> in <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> Prob01Pass03<span class=\"token punctuation\">.</span>printHelloWorld\n\n  program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>_ should be <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using <code class=\"language-text\">Reader</code> , in <code class=\"language-text\">main</code> we end up with a pure <em>description</em> of our “Hello World” program in <code class=\"language-text\">program</code>. A pure program that we can interpret, or <code class=\"language-text\">run</code> any way we want.</p>\n<p>It’s pure in the sense that we can call <code class=\"language-text\">printHelloWorld</code> any number of times and it won’t have any side effects, and will <em>always</em> return the same program. I’ve read a lot of material with the idea that <em>functional programs are descriptions of programs that you run</em>. This looks like it fits the bill.</p>\n<p>We can interpret our program in another way with the use of a <em>“fake”</em> or a <em>“mock”</em> <code class=\"language-text\">println</code>—one that just checks if it got passed <code class=\"language-text\">&quot;Hello World&quot;</code>. We could even interpret <code class=\"language-text\">printHelloWorld</code> to print the line to a file, or write a smoke message in the sky with an autonomous drone given the right <code class=\"language-text\">println</code> function.</p>\n<p>What does Reader buy us? There is some extra cognitive overhead here for sure. We’ve had to learn Reader when we could have just stuck to our second pass by just passing functions. We’ve gained <em>the flexibility and the concept</em> of a pure program, one that could be interpreted in many ways, one of which is useful for testing. What else can we gain?</p>\n<h2 id=\"the-reader-writer-way\" style=\"position:relative;\"><a href=\"#the-reader-writer-way\" aria-label=\"the reader writer way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <em>Reader-Writer</em> way</h2>\n<p>Say, for our fourth pass, we wanted to know how fast “Hello World” runs on our computer. The simplest, non-testable way looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Prob01Pass04 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>currentTimeMillis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> time <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>currentTimeMillis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start\n    println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $time ms.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our problem with this code is that it doesn’t easily allow us to change <em>how</em> we print “Hello World”, as well as <em>how</em> we read the time. <code class=\"language-text\">System.getCurrentTimeMillis</code> and <code class=\"language-text\">println</code> here are impure functions. <code class=\"language-text\">System.getCurrentTimeMillis</code> observes the side effect of passing time while <code class=\"language-text\">println</code> has the side effect of writing to a console. Consequently, besides testing Hello World, we can’t test if it’s logging the right amount of time.</p>\n<p>Let’s make an <code class=\"language-text\">AppConfig</code> trait and give it the default console and system time version that we can use in <code class=\"language-text\">main</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> AppConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@throws</span><span class=\"token punctuation\">(</span>classOf<span class=\"token punctuation\">[</span>Exception<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> println<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span>\n  <span class=\"token keyword\">def</span> startTimeMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span>\n  <span class=\"token keyword\">def</span> endTimeMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> AppConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> default<span class=\"token operator\">:</span> AppConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> AppConfig <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> println<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> Predef<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> startTimeMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>currentTimeMillis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> endTimeMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>currentTimeMillis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that we’ve declared that our <code class=\"language-text\">println</code> can fail. This is due to <code class=\"language-text\">println</code> being flexible enough for this to happen. Now that we have <code class=\"language-text\">AppConfig</code> nailed down, let’s see what we can do with <code class=\"language-text\">Reader</code> and <code class=\"language-text\">Writer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> cats<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">,</span> cats<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">,</span> cats<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> Writer<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob01Pass05 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld\n\n    <span class=\"token comment\">// at the end of the world</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>timeElapsed<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>AppConfig<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n    println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $timeElapsed ms.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">val</span> printHelloWorld<span class=\"token operator\">:</span> Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    Reader <span class=\"token punctuation\">{</span> appCfg <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>appCfg<span class=\"token punctuation\">.</span>startTimeMillis<span class=\"token punctuation\">)</span>\n        _ <span class=\"token keyword\">&lt;-</span> value<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>endTimeMillis<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Looking at <code class=\"language-text\">main</code>, <code class=\"language-text\">printHelloWorld</code> is run twice. That’s because our program now has <em>two</em> effects, <code class=\"language-text\">Reader</code> and <code class=\"language-text\">Writer</code>. Our third pass only had <code class=\"language-text\">Reader</code> so we’ve only had to call <code class=\"language-text\">run</code> once. In FP, pure programs like <code class=\"language-text\">printHelloWorld</code> will be run or <em>interpreted</em> as many times as it has effects. Once we <em>interpret</em> all those effects, we end up with the output of our pure program, in this case, a <code class=\"language-text\">(Long, Unit)</code> tuple, the first part of which contains our <code class=\"language-text\">timeElapsed</code> in milliseconds.</p>\n<p>With <code class=\"language-text\">AppConfig</code>, <code class=\"language-text\">Reader</code>, and <code class=\"language-text\">Writer</code>, we’ve decoupled our code from the console and the system clock. Note that we’ve had to manually <code class=\"language-text\">println</code> our <code class=\"language-text\">timeElapsed</code> report in <code class=\"language-text\">main</code>, since the second <code class=\"language-text\">run</code> produces a pure log of <code class=\"language-text\">timeElapsed</code>.</p>\n<p>With this, we can write a test for our fifth pass that checks both printing Hello World and logging the time.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> MockAppConfig <span class=\"token keyword\">extends</span> AppConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> println<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> s should be <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> startTime<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">def</span> endTime<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token string\">\"our fifth pass at printHelloWorld\"</span> should\n    <span class=\"token string\">\"be a flexible, timed hello world program\"</span> in <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> Prob01Pass05<span class=\"token punctuation\">.</span>printHelloWorld\n\n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>timeElapsed<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>MockAppConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n  timeElapsed should be <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s take a closer look at our <code class=\"language-text\">printHelloWorld</code> program itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> printHelloWorld<span class=\"token operator\">:</span> Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  Reader <span class=\"token punctuation\">{</span> appCfg <span class=\"token keyword\">=></span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n      _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>appCfg<span class=\"token punctuation\">.</span>startTime<span class=\"token punctuation\">)</span>\n      _ <span class=\"token keyword\">&lt;-</span> value<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>endTime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have a stack of two effects, Reader &#x26; Writer. Our <code class=\"language-text\">Writer</code> needs access to <code class=\"language-text\">appCfg</code> to log the time, which means <code class=\"language-text\">Reader</code> has to be on the top of our effect stack. Note how we’ve had to manually stack our <code class=\"language-text\">Writer</code> program inside our <code class=\"language-text\">Reader</code>. Though we did also gain the ability for our computation (printing Hello World, mind you), to have multiple effects.</p>\n<p>If we had to stack more effects, our pure program code would get more and more unwieldy and shift further and further to the right. To illustrate this, let’s have a go at adding error handling to our stack.</p>\n<h2 id=\"the-reader-writer-either-way\" style=\"position:relative;\"><a href=\"#the-reader-writer-either-way\" aria-label=\"the reader writer either way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <em>Reader-Writer-Either</em> Way</h2>\n<p>Our <code class=\"language-text\">println</code> can throw an exception, as declared in <code class=\"language-text\">AppConfig</code>. After all, we could have our pure program tell a rover on Mars to print “Hello World” on Martian sand, again given the right <code class=\"language-text\">println</code>function. We could very easily lose our connection to the rover! As programmers, we have to be prepared for this scenario. Let’s add error-handling to our stack.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">,</span> cats<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> Writer<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob01Pass06 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld\n\n    <span class=\"token comment\">// at the end of the world</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>timeElapsed<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>AppConfig<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n    result <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Hello world failed: $e\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> _       <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $timeElapsed ms.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">type</span> ReaderWriterEither<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">val</span> printHelloWorld<span class=\"token operator\">:</span> ReaderWriterEither<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    Reader <span class=\"token punctuation\">{</span> appCfg <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>appCfg<span class=\"token punctuation\">.</span>startTimeMillis<span class=\"token punctuation\">)</span>\n        e <span class=\"token keyword\">&lt;-</span> value<span class=\"token punctuation\">[</span><span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            Right<span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> e<span class=\"token operator\">:</span> Exception <span class=\"token keyword\">=></span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _ <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span>appCfg<span class=\"token punctuation\">.</span>endTimeMillis<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> e\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that in <code class=\"language-text\">main</code>, after we <em>run</em> or <em>remove a layer</em> from the pure program twice, we have one last layer in error handling. We have to handle any errors that might have occurred during the course of its execution.</p>\n<p>Our hand-rolled <code class=\"language-text\">ReaderWriterEither[A]</code> stack now contains <code class=\"language-text\">Reader[AppConfig, ?]</code>, <code class=\"language-text\">Writer[Long, ?]</code> and <code class=\"language-text\">Either[Throwable, ?]</code>. Note how we’ve had to have <em>yet another level of indentation</em> just to support error handling. </p>\n<p>A test for this code looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> MockUnreachableRover <span class=\"token keyword\">extends</span> AppConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> exception <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't connect to Mars!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> println<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">throw</span> exception <span class=\"token comment\">// this matters</span>\n  <span class=\"token keyword\">def</span> startTimeMillis<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// these values</span>\n  <span class=\"token keyword\">def</span> endTimeMillis<span class=\"token operator\">:</span>   <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// don't matter</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token string\">\"our sixth pass at printHelloWorld\"</span> should\n    <span class=\"token string\">\"be a flexible, timed, resilient hello world program\"</span> in <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> Prob01Pass06<span class=\"token punctuation\">.</span>printHelloWorld\n\n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>timeElapsed<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>MockAppConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n  timeElapsed should be <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>MockUnreachableRover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n  result should be <span class=\"token punctuation\">(</span>Left<span class=\"token punctuation\">(</span>MockUnreachableRover<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our tests say it all. We now have a Hello World program that’s flexible (allowing any <code class=\"language-text\">println</code>), timed (in ms), and resilient (by catching errors). By now we should be able to say it’s all worth it. If we know how to imbue our humble Hello World program with these qualities, we now stand a chance at ensuring all our functional programs have the same qualities. But our <code class=\"language-text\">printHelloWorld</code> already looks rather <em>tedious</em>. Scale it to any bigger program and it becomes a maintenance and readability nightmare. There has to be a better way to write functional programs. This calls for a more suitable abstraction.</p>\n<h2 id=\"the-monad-transformer-way\" style=\"position:relative;\"><a href=\"#the-monad-transformer-way\" aria-label=\"the monad transformer way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <em>Monad Transformer</em> Way</h2>\n<p>One way is to use monad transformers to flatten our for-comprehension:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>implicits</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> ReaderT<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> WriterT<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob01Pass07 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld\n\n    <span class=\"token comment\">// at the end of the world</span>\n    program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>AppConfig<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>                   <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Hello world failed: $e\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timeElapsed<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token keyword\">=></span>\n        println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $timeElapsed ms.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">type</span> EitherThrowable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">type</span> WriterLongEither<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> WriterT<span class=\"token punctuation\">[</span>EitherThrowable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">type</span> ReaderWriterEither<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ReaderT<span class=\"token punctuation\">[</span>WriterLongEither<span class=\"token punctuation\">,</span> AppConfig<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> printHelloWorld<span class=\"token operator\">:</span> ReaderWriterEither<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n      appConfig <span class=\"token keyword\">&lt;-</span> ask<span class=\"token punctuation\">[</span>WriterLongEither<span class=\"token punctuation\">,</span> AppConfig<span class=\"token punctuation\">]</span>\n      _         <span class=\"token keyword\">&lt;-</span> logTime<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>appConfig<span class=\"token punctuation\">.</span>startTimeMillis<span class=\"token punctuation\">)</span>\n      either    <span class=\"token keyword\">&lt;-</span> ReaderT<span class=\"token punctuation\">.</span>lift<span class=\"token punctuation\">[</span>WriterLongEither<span class=\"token punctuation\">,</span> AppConfig<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n                     WriterT<span class=\"token punctuation\">.</span>lift<span class=\"token punctuation\">[</span>EitherThrowable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n                       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                         Right<span class=\"token punctuation\">(</span>appConfig<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> e<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span>\n                         Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">}</span>\n                     <span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">)</span>\n      _         <span class=\"token keyword\">&lt;-</span> logTime<span class=\"token punctuation\">(</span>appConfig<span class=\"token punctuation\">.</span>endTimeMillis<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> either\n\n  <span class=\"token keyword\">def</span> logTime<span class=\"token punctuation\">(</span>time<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReaderWriterEither<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    _ <span class=\"token keyword\">&lt;-</span> ReaderT<span class=\"token punctuation\">.</span>lift<span class=\"token punctuation\">[</span>WriterLongEither<span class=\"token punctuation\">,</span> AppConfig<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>tell<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This was a <strong>bitch</strong> to write, and it’s as clean as I could get it with my limited knowledge of <code class=\"language-text\">cats</code>. I’m pretty sure there’s a way more compact way to write this that involves <code class=\"language-text\">cats.EitherT</code>. The <code class=\"language-text\">cats</code> library’s implicits here mean that anytime we have to use <code class=\"language-text\">ReaderT</code>’s functions <code class=\"language-text\">ask</code> and <code class=\"language-text\">lift</code>, we’ve had to specify exactly what it is we’re stacking a <code class=\"language-text\">Reader</code> on top of. Otherwise, we get all sorts of nasty compilation errors.</p>\n<p>It is somewhat of an improvement though, in that we’re able to specify our application logic in <em>only one layer</em> of a for-comprehension. It’s the lifting part that stings. Stacking together three effects doesn’t seem to get us the concise code that we want.</p>\n<p>Our test code is fairly trivial and similar to the last one:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"our seventh pass monad transformers printHelloWorld\"</span> should\n  <span class=\"token string\">\"be a flexible, timed, resilient hello world program\"</span> in <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> Prob01Pass07<span class=\"token punctuation\">.</span>printHelloWorld\n\n  program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>MockAppConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run should be <span class=\"token punctuation\">(</span>Right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  program<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>MockUnreachableRover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run should be <span class=\"token punctuation\">(</span>Left<span class=\"token punctuation\">(</span>MockUnreachableRover<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"the-eff-monad-way\" style=\"position:relative;\"><a href=\"#the-eff-monad-way\" aria-label=\"the eff monad way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <em>Eff Monad</em> Way</h2>\n<p>Let’s let the code do the talking this time:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>data</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>atnos<span class=\"token punctuation\">.</span>eff</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>atnos<span class=\"token punctuation\">.</span>eff<span class=\"token punctuation\">.</span>all</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>atnos<span class=\"token punctuation\">.</span>eff<span class=\"token punctuation\">.</span>syntax<span class=\"token punctuation\">.</span>all</span><span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob01Pass08 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">type</span> Stack <span class=\"token operator\">=</span> Fx<span class=\"token punctuation\">.</span>fx3<span class=\"token punctuation\">[</span>\n    Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld<span class=\"token punctuation\">[</span>Stack<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// at the end of the world</span>\n    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n      program\n        <span class=\"token punctuation\">.</span>runReader<span class=\"token punctuation\">(</span>AppConfig<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>runWriterUnsafe<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>runEither\n        <span class=\"token punctuation\">.</span>run\n\n    result <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Our program's result is a side effect that can fail.</span>\n      <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Hello world failed: $e\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">type</span> _appCfg<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> R\n  <span class=\"token keyword\">type</span> _timeReport<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> R\n\n  <span class=\"token keyword\">def</span> printHelloWorld<span class=\"token punctuation\">[</span>R<span class=\"token operator\">:</span> _appCfg <span class=\"token operator\">:</span> _timeReport <span class=\"token operator\">:</span> _throwableEither<span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> Eff<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    appConfig <span class=\"token keyword\">&lt;-</span> ask\n    start <span class=\"token operator\">=</span> appConfig<span class=\"token punctuation\">.</span>startTimeMillis\n    either    <span class=\"token keyword\">&lt;-</span> catchNonFatalThrowable<span class=\"token punctuation\">(</span>appConfig<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    durationInMs <span class=\"token operator\">=</span> appConfig<span class=\"token punctuation\">.</span>endTimeMillis <span class=\"token operator\">-</span> start\n    _         <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $durationInMs ms.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> either\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It’s embarrassing how stupidly simple <code class=\"language-text\">printHelloWorld</code> looks compared to passes 6 and 7. Let’s break each part down to see how it all works.</p>\n<p>We define our program’s effect stack using a type declaration as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> Stack <span class=\"token operator\">=</span> Fx<span class=\"token punctuation\">.</span>fx3<span class=\"token punctuation\">[</span>\n  Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">Fx.fx3</code> means we have three effects as shown. Eff supports up to 12 effects stacked with <code class=\"language-text\">Fx.fx12</code>. Why the seemingly arbitrary selection of 12? I don’t know. Probably something to do with the Scala compiler? At any rate, we’ll need this later for <code class=\"language-text\">main</code> to know how to interpret our pure program. We also need <code class=\"language-text\">printHelloWorld</code> to declare what sort of effects it needs. Before we do that, we make a couple of type declarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> _appCfg<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reader<span class=\"token punctuation\">[</span>AppConfig<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> R\n<span class=\"token keyword\">type</span> _timeReport<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Writer<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> R</code></pre></div>\n<p>We need these since <code class=\"language-text\">Reader</code> and <code class=\"language-text\">Writer</code> both accept two type parameters. Now we use them in our <code class=\"language-text\">printHelloWorld</code> signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> printHelloWorld<span class=\"token punctuation\">[</span>R<span class=\"token operator\">:</span> _appCfg <span class=\"token operator\">:</span> _timeReport <span class=\"token operator\">:</span> _throwableEither<span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">:</span> Eff<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  appConfig <span class=\"token keyword\">&lt;-</span> ask\n  start <span class=\"token operator\">=</span> appConfig<span class=\"token punctuation\">.</span>startTimeMillis\n  either    <span class=\"token keyword\">&lt;-</span> catchNonFatalThrowable<span class=\"token punctuation\">(</span>appConfig<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  durationInMs <span class=\"token operator\">=</span> appConfig<span class=\"token punctuation\">.</span>endTimeMillis <span class=\"token operator\">-</span> start\n  _         <span class=\"token keyword\">&lt;-</span> tell<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Ran hello world in $durationInMs ms.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> either</code></pre></div>\n<p>It’s almost as if someone put together <code class=\"language-text\">Reader</code>, <code class=\"language-text\">Writer</code> and <code class=\"language-text\">Either</code> and combined them together into one monad. We simply <code class=\"language-text\">ask</code> the <code class=\"language-text\">Reader</code> for the config, catch <code class=\"language-text\">println</code> errors with <code class=\"language-text\">catchNonFatalThrowable</code>, and <code class=\"language-text\">tell</code> <code class=\"language-text\">Writer</code> to write our running time to some log.</p>\n<p>Finally, let’s go take a look at <code class=\"language-text\">main</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> printHelloWorld<span class=\"token punctuation\">[</span>Stack<span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// at the end of the world</span>\n  <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Either<span class=\"token punctuation\">[</span>Throwable<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    program\n      <span class=\"token punctuation\">.</span>runReader<span class=\"token punctuation\">(</span>AppConfig<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>runWriterUnsafe<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>runEither\n      <span class=\"token punctuation\">.</span>run\n\n  result <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Our program's result is a side effect that can fail.</span>\n    <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Hello world failed: $e\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We first let <code class=\"language-text\">printHelloWorld</code> know it runs under a stack of effects as specified earlier in our <code class=\"language-text\">Stack</code> type. At the end of the world, we run our effects exactly in the order shown above. Remember, we need to <code class=\"language-text\">runReader</code> before <code class=\"language-text\">runWriterUnsafe</code> because our usage of the <code class=\"language-text\">Writer</code> effect in <code class=\"language-text\">printHelloWorld</code> depends on there being an <code class=\"language-text\">AppConfig</code>, i.e. it needs to get the current time to write <code class=\"language-text\">println</code>’s running time.</p>\n<p>Note that <code class=\"language-text\">runWriterUnsafe</code> means we can just write our logs in a function with side effects, e.g. <code class=\"language-text\">println</code> to console. You can choose to log this anywhere. Very handy when you have to log a lot of stuff and you don’t want your logs to eat up all your RAM like Google Chrome does. When we <code class=\"language-text\">runEither</code>, we’re left with only one effect, <code class=\"language-text\">Eff</code>. You can think of <code class=\"language-text\">Eff</code> as an effect that combines other effects. We finally get <code class=\"language-text\">result</code> with the last <code class=\"language-text\">run</code>.</p>\n<p>Our final act in <code class=\"language-text\">main</code> is handling any errors that might have occurred while trying to print <code class=\"language-text\">&quot;Hello World&quot;</code>. <code class=\"language-text\">e</code> in <code class=\"language-text\">Left(e)</code> contains our possible error while <code class=\"language-text\">Right</code> only contains <code class=\"language-text\">Unit</code>, which we can just ignore.</p>\n<p>Looking at <code class=\"language-text\">main</code>, we get the notion that the entire goal of our program is to produce a side effect, which can fail non-fatally.</p>\n<p>How do we test our Eff program? We just interpret it a different way.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"our eighth pass printHelloWorld Eff monad program\"</span> should\n  <span class=\"token string\">\"be flexible, timed, and resilient\"</span> in <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> program <span class=\"token operator\">=</span> Prob01Pass08<span class=\"token punctuation\">.</span>printHelloWorld<span class=\"token punctuation\">[</span>Prob01Pass08<span class=\"token punctuation\">.</span>Stack<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">val</span> runningMock<span class=\"token operator\">:</span> AppConfig <span class=\"token operator\">=</span> MockAppConfig\n  <span class=\"token keyword\">val</span> failingMock<span class=\"token operator\">:</span> AppConfig <span class=\"token operator\">=</span> MockUnreachableRover\n\n  program\n    <span class=\"token punctuation\">.</span>runReader<span class=\"token punctuation\">(</span>runningMock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>runWriter\n    <span class=\"token punctuation\">.</span>runEither\n    <span class=\"token punctuation\">.</span>run should be <span class=\"token punctuation\">(</span>Right<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">(</span><span class=\"token string\">\"Ran hello world in 2 ms.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  program\n    <span class=\"token punctuation\">.</span>runReader<span class=\"token punctuation\">(</span>failingMock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>runWriter\n    <span class=\"token punctuation\">.</span>runEither\n    <span class=\"token punctuation\">.</span>run should be <span class=\"token punctuation\">(</span>Left<span class=\"token punctuation\">(</span>MockUnreachableRover<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h1>\n<p>FP can be difficult without the proper abstractions. Even Hello World can get unwieldy. That isn’t to say our FP versions are invariably harder than procedural code or “mainstream” OOP equivalents. Indeed these versions can yield even more difficult, opaque code.</p>\n<p>Our pure programs, however, are highly composable, easier to reason about, and can very easily be made asynchronous, concurrent, and parallel just by adding some <code class=\"language-text\">Task</code> or <code class=\"language-text\">Future</code> effect on the stack and in our pure program’s code. It’s just not as easy to do the same in procedural/OOP code. To see this in action, if this article has helped you understand the whole point of the Eff monad, I strongly suggest you move on to working on the excellent exercises in Ben Hutchinson’s <a href=\"https://github.com/benhutchison/GettingWorkDoneWithExtensibleEffects/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>“Getting Work Done With Extensible Effects”</em></a>.</p>\n<p>There are two other ways to express our stack that I didn’t include here for lack of time. One way is with the free monad and the other is by rolling out your own <code class=\"language-text\">ReaderWriterEither[R, T, L, A]</code> type which effectively lets you have the same level of abstraction as with Eff. I leave these two as exercises for the reader.</p>","fields":{"slug":"/posts/eff-in-context","tagSlugs":["/tag/monad/","/tag/functional-programming/","/tag/eff/","/tag/scala/"]},"frontmatter":{"date":"2017-10-31","description":"Looking at Scala's version of the eff monad in context in comparison with other functional approaches","tags":["Monad","Functional Programming","Eff","Scala"],"title":"Eff in Context","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/eff-in-context"}}}