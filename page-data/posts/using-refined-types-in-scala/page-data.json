{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/using-refined-types-in-scala","result":{"data":{"markdownRemark":{"id":"71ebb2b9-f120-5b1a-bfb1-ba72b7a4ec35","html":"<h1 id=\"refined\" style=\"position:relative;\"><a href=\"#refined\" aria-label=\"refined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refined</h1>\n<p><a href=\"https://github.com/fthomas/refined\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Refined</a> has some practical, useful ideas. There are obvious, clear benefits to domain modeling with refined types. Learning to use the library and getting used to it does have some overhead though, as with any new thing. We’ll be getting into the nitty-gritty of that overhead as I learn the library.</p>\n<p>To have something to base this series on, I’ll work on <code class=\"language-text\">adriann</code>’s <a href=\"https://adriann.github.io/programming_problems.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Programming Problems</a>, starting with Elementary Problem 3. We’re skipping 1 and 2 because they’re trivial and don’t benefit from refined types, anyway.</p>\n<p>Here’s the problem statement:</p>\n<blockquote>\n<ol start=\"3\">\n<li>Modify the previous program such that only the users Alice and Bob are greeted with their names.</li>\n</ol>\n</blockquote>\n<p>And here’s a solution to Problem 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>StdIn<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob3 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span>\n    println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">||</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span> s<span class=\"token string\">\"Hello, $name!\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token string\">\"Go away!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we’re reading a line, making a greeting out of the name the user enters, and printing that greeting to the console. Our greeting can be polite, if your name’s either <em>Alice</em> or <em>Bob</em>. We changed the problem a bit by being a bit standoffish to anyone with any other name.</p>\n<p>What if we we’re given an empty <code class=\"language-text\">String</code>? It’d be awkward to say <code class=\"language-text\">&quot;Go away, !&quot;</code>. Like stuttering, but in writing. Let’s say we don’t ever want an empty <code class=\"language-text\">String</code> for <code class=\"language-text\">greet</code>.</p>\n<p>Enter refined types.</p>\n<p>First off, we could fix it in a lot of ways, but there’s already <a href=\"https://beyondthelines.net/programming/refined-types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a good writeup</a> on why refined types are, at least IMO, one of the better ways. So let’s use them here.</p>\n<p>First, we change our <code class=\"language-text\">greet</code>’s signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> Refined NonEmpty<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Already, we run into a problem in <code class=\"language-text\">main</code>, because <code class=\"language-text\">readLine</code> returns a <code class=\"language-text\">String</code>, while <code class=\"language-text\">greet</code> now wants a <code class=\"language-text\">NonEmptyString</code>. While we’re at it, let’s add an alias for brevity:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> NonEmptyString <span class=\"token operator\">=</span> <span class=\"token builtin\">String</span> Refined NonEmpty</code></pre></div>\n<p>We also have another, more pernicious problem in that we’re comparing the equality of a <code class=\"language-text\">String</code> to a <code class=\"language-text\">NonEmptyString</code>, which is a patently bad idea. The culprit here is <code class=\"language-text\">name == &quot;Alice&quot; || name == &quot;Bob&quot;</code>.</p>\n<p>At this point, I think it’s a good time to use Scalaz’s type-safe <code class=\"language-text\">Equal</code>. Let’s change the expression to <code class=\"language-text\">name === &quot;Alice&quot; || name === &quot;Bob&quot;</code>.</p>\n<p>Now we have three errors, namely:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> value <span class=\"token operator\">==</span><span class=\"token operator\">=</span> is not a member of eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Refined<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>NonEmpty<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">||</span> name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span> s<span class=\"token string\">\"Hello, $name!\"</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>              <span class=\"token operator\">^</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> value <span class=\"token operator\">==</span><span class=\"token operator\">=</span> is not a member of eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Refined<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>NonEmpty<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">||</span> name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span> s<span class=\"token string\">\"Hello, $name!\"</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>                                  <span class=\"token operator\">^</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> <span class=\"token keyword\">type</span> mismatch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>  found   <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>  required<span class=\"token operator\">:</span> eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Refined<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>NonEmpty<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This is a strictly better outcome than trying to compare the name read from user input, only for our conditional to always come up <code class=\"language-text\">false</code> because they aren’t the same type! So how do we make our Equal typeclass work for refined types?</p>\n<p>It turns out <code class=\"language-text\">refined</code> has support for <code class=\"language-text\">Equal</code> so let’s go with that and <code class=\"language-text\">import eu.timepit.refined.scalaz._</code>. Note that we’ve had to add the dependency in <code class=\"language-text\">build.sbt</code> with: <code class=\"language-text\">libraryDependencies += &quot;eu.timepit&quot; %% &quot;refined-scalaz&quot; % &quot;0.8.4&quot;</code>. Refined also provides a way to automatically <em>lift</em> literals into refined types, so let’s use them with <code class=\"language-text\">import eu.timepit.refined.auto._</code>.</p>\n<p>Now that we’ve resolved the errors in our conditional, we are left with the following new error:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> compile<span class=\"token operator\">-</span>time refinement only works <span class=\"token keyword\">with</span> literals\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>     println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span>                           <span class=\"token operator\">^</span></code></pre></div>\n<p>And for good reason. There isn’t a way for our compiler to know if our user is entering a <code class=\"language-text\">NonEmptyString</code>! The user can choose <em>not</em> to enter anything after all. With that in mind, we have to resolve the type <strong>at runtime</strong>. To do this, we <em>refine</em> our user input at runtime.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>refineV</span>\n\n<span class=\"token keyword\">val</span> refinedUserInput<span class=\"token operator\">:</span> Either<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Refined<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n      refineV<span class=\"token punctuation\">[</span>NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When refining values at runtime, we end up with an <code class=\"language-text\">Either[String, Refined[_, _]]</code>. At this point, we know we’ve reached the edge of our program. We <em>have</em> to rewrite <code class=\"language-text\">main</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  refineV<span class=\"token punctuation\">[</span>NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token comment\">// what to do here?</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using refined types, we are <em>eventually forced</em> to deal with the case where our user enters an invalid name. Let’s say we decide to just tell the user that they didn’t enter a name. We can do that here.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  refineV<span class=\"token punctuation\">[</span>NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"You didn't enter a name!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can even ask the user again, with recursion.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span>\n  refineV<span class=\"token punctuation\">[</span>NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span>\n      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"You didn't enter a name!\"</span><span class=\"token punctuation\">)</span>\n      main<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here’s the whole code:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> scalaz<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> Scalaz<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>api</span><span class=\"token punctuation\">.</span>Refined\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">.</span>NonEmpty\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>scalaz</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>auto</span><span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">eu<span class=\"token punctuation\">.</span>timepit<span class=\"token punctuation\">.</span>refined<span class=\"token punctuation\">.</span>refineV</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>StdIn<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">object</span> Prob3 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">type</span> NonEmptyString <span class=\"token operator\">=</span> <span class=\"token builtin\">String</span> Refined NonEmpty\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span>\n    refineV<span class=\"token punctuation\">[</span>NonEmpty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>readLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name? \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"You didn't enter a name!\"</span><span class=\"token punctuation\">)</span>\n        main<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> Refined NonEmpty<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">||</span> name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span> s<span class=\"token string\">\"Hello, $name!\"</span>\n    <span class=\"token keyword\">else</span> s<span class=\"token string\">\"Go away, $name!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/using-refined-types-in-scala","tagSlugs":["/tag/domain-modeling/","/tag/refined-types/","/tag/scala/"]},"frontmatter":{"date":"2017-10-21","description":"Refined types are pretty cool for domain modeling it turns out","tags":["Domain Modeling","Refined Types","Scala"],"title":"Using Refined Types in Scala","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/using-refined-types-in-scala"}}}